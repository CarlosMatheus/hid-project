{"version":3,"sources":["Api.js","CoordinateUtils.js","ApiMock.js","Square.js","Region.js","Area.js","App.js","reportWebVitals.js","index.js"],"names":["axios","defaults","headers","post","fetchEstimatedValues","latMatrix","lonMatrix","a","console","log","data","proxy","then","res","noiseMatrix","catch","err","fetchSensorsPosition","get","getDistance","pontALat","pointALon","pointBLat","pointBLon","rlat1","Math","PI","rlat2","difflat","difflon","asin","sqrt","sin","cos","getThirdPoint","lat1","lon1","lat2","lon2","d12","d13","lat","lon","getSensors","sensorsLatList","sensorsLonList","intensityMatrix","i","length","intensityArray","j","hasSensor","k","d","push","get1SensorMockMatrix","getExpectedValue","pointLat","pointLon","exp","noiseValue","getMockSensors","componentToHex","c","hex","toString","rgbToHex","r","g","b","Square","props","isMeter","intensityPercentage","parseInt","setSelectedSquare","style","height","width","backgroundColor","marginRight","marginBottom","onMouseEnter","onMouseLeave","random","Region","isMain","main","matrix","Array","fill","startRow","startColumn","display","map","row","rowIdx","square","colIdx","Area","lenOfHeight","lenOfWidth","baseLength","App","useState","selectedSquare","topLeftLat","topLeftLon","topRightLat","topRightLon","bottomRightLat","bottomRightLon","cathetusTop","cathetusRight","bottomLeftLat","bottomLeftLon","right","latRight","lonRight","left","latLeft","lonLeft","latArray","lonArray","getLatLonValues","setIntensityMatrix","displayIntensityMatrix","setDisplayIntensityMatrix","intensityMatrixSensors","setIntensityMatrixSensors","useEffect","error","intensityM","sensorLonList","Container","marginTop","alignItems","marginLeft","Card","Header","Nav","variant","defaultActiveKey","Item","Link","href","onClick","require","generatePerlinNoise","forEach","element","getPerlinMockMatrix","Body","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71702c3e.chunk.js","sourcesContent":["import axios from 'axios';\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n\n/*\nExpected request body:\n{\n    lonMatrix: [\n        [\n            -46.682009518288844,\n            -46.68200695045289,\n        ],\n        [\n            -46.68200438261693,\n            -46.68200181478098,\n        ]\n    ], latMatrix: [\n        [\n            -23.588490802845133,\n            -23.58849948271186,\n        ],\n        [\n            -23.588508162578584,\n            -23.588516842445312,\n        ]\n    ]\n}\n\nExpected response body:\n{\n    noiseMatrix: [\n        [\n            100,\n            98\n        ],\n        [\n            105,\n            103\n        ]\n    ]\n}\n*/\nexport const fetchEstimatedValues = async (latMatrix, lonMatrix) => {\n    console.log('Dispatching fetchEstimatedValues')\n    const data = {\n        latMatrix, lonMatrix\n    }\n    const proxy = \"https://cors-anywhere.herokuapp.com/\"\n    const url = \"https://obra-silenciosa-back.herokuapp.com/estimatedNoiseValues\"\n    return await axios.post(proxy + url, {\n        headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n            'Content-Type': 'application/json;charset=utf-8',\n        },\n        ...data\n    })\n        .then(res => res.data.noiseMatrix)\n        .then(res => {\n            // console.log(res)\n            return res\n        })\n        .catch(err => {\n            console.log(err)\n            return err\n        })\n}\n\n/*\nExpected response:\n{\n    sensorsLatList: [-23.588826342902333],\n    sensorLonList: [-46.682215230240686]\n}\n*/\nexport const fetchSensorsPosition = async () => {\n    console.log('Dispatching fetchSensorsPosition')\n    const proxy = \"https://cors-anywhere.herokuapp.com/\"\n    const url = \"https://obra-silenciosa-back.herokuapp.com/sensorPositions\"\n    return await axios.get(proxy + url, {\n        headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n            'Content-Type': 'application/json;charset=utf-8',\n        }\n    })\n        .then(res => res.data)\n        .then(res => {\n            // console.log(res)\n            return res\n        })\n        .catch(err => {\n            console.log(err)\n            return err\n        })\n}\n\n/*\n\n*/","const getDistance = (pontALat, pointALon, pointBLat, pointBLon) => {\n    var R = 6371000; // Radius of the Earth in miles\n    var rlat1 = pontALat * (Math.PI / 180); // Convert degrees to radians\n    var rlat2 = pointBLat * (Math.PI / 180); // Convert degrees to radians\n    var difflat = rlat2 - rlat1; // Radian difference (latitudes)\n    var difflon = (pointBLon - pointALon) * (Math.PI / 180); // Radian difference (longitudes)\n\n    return 2 * R * Math.asin(Math.sqrt(Math.sin(difflat / 2) * Math.sin(difflat / 2) + Math.cos(rlat1) * Math.cos(rlat2) * Math.sin(difflon / 2) * Math.sin(difflon / 2)));\n}\n\nfunction getThirdPoint(lat1, lon1, lat2, lon2, d12, d13) {\n    return {\n        lat: (lat2 - lat1) * d13 / d12 + lat1,\n        lon: (lon2 - lon1) * d13 / d12 + lon1\n    }\n}\n\nfunction getLatLonValues(\n    topLeftLat,\n    topLeftLon,\n    bottomRightLat,\n    bottomRightLon,\n    bottomLeftLat,\n    bottomLeftLon,\n    topRightLat,\n    topRightLon,\n    baseLength\n) {\n    const cathetusTop = getDistance(topLeftLat, topLeftLon, topRightLat, topRightLon);\n    const cathetusRight = getDistance(topRightLat, topRightLon, bottomRightLat, bottomRightLon);\n\n    const lenOfHeight = parseInt(cathetusRight);\n    const lenOfWidth = parseInt(cathetusTop);\n\n    let latMatrix = [], lonMatrix = []\n    // We will find all points on the line formed by a left and a right point\n    for (let i = 0; i < 2 * baseLength + lenOfHeight; i++) {\n        // Get right point coordinate by interpolating bottom right and top right\n        const d12Right = getDistance(topRightLat, topRightLon, bottomRightLat, bottomRightLon)\n        const d13Right = i - baseLength\n        const right = getThirdPoint(topRightLat, topRightLon, bottomRightLat, bottomRightLon, d12Right, d13Right)\n        const latRight = right.lat\n        const lonRight = right.lon\n\n        // Get left point coordinate by interpolating left right and left right\n        const d12Left = getDistance(topLeftLat, topLeftLon, bottomLeftLat, bottomLeftLon)\n        const d13Left = i - baseLength\n        const left = getThirdPoint(topLeftLat, topLeftLon, bottomLeftLat, bottomLeftLon, d12Left, d13Left)\n        const latLeft = left.lat\n        const lonLeft = left.lon\n\n        let latArray = [], lonArray = []\n        // Find all points on the line formed by the left and right point\n        for (let j = 0; j < 2 * baseLength + lenOfWidth; j++) {\n            const d12 = getDistance(latLeft, lonLeft, latRight, lonRight)\n            const d13 = j - baseLength\n            const { lat, lon } = getThirdPoint(latLeft, lonLeft, latRight, lonRight, d12, d13)\n            latArray.push(lat)\n            lonArray.push(lon)\n        }\n        latMatrix.push(latArray)\n        lonMatrix.push(lonArray)\n    }\n\n    return {\n        latMatrix, lonMatrix\n    }\n}\n\nconst getSensors = (latMatrix, lonMatrix, sensorsLatList, sensorsLonList) => {\n    let intensityMatrix = []\n    for (let i = 0; i < latMatrix.length; i++) {\n        let intensityArray = []\n        for (let j = 0; j < lonMatrix.length; j++) {\n            let hasSensor = false;\n            for (let k = 0; k < sensorsLatList.length; k++) {\n                const d = getDistance(sensorsLatList[k], sensorsLonList[k], latMatrix[i][j], lonMatrix[i][j])\n                hasSensor = hasSensor || d < 1.5\n            }\n            intensityArray.push(hasSensor ? 1 : 0)\n        }\n        intensityMatrix.push(intensityArray)\n    }\n    return intensityMatrix\n}\n\nexport {\n    getLatLonValues,\n    getDistance,\n    getSensors\n}","import { getDistance, getSensors } from './CoordinateUtils';\n\nconst getPerlinMockMatrix = (height, width) => {\n    var perlin = require('perlin-noise');\n  \n    const matrix = perlin.generatePerlinNoise(height, width);\n    const intensityMatrix = Array(height).fill(Array(width).fill(0))\n  \n    intensityMatrix.forEach((row, rowIdx)=>{\n      row.forEach((element, colIdx)=>{\n          intensityMatrix[rowIdx][colIdx] = matrix[(rowIdx * width) + colIdx];\n      })\n    })\n  \n    return intensityMatrix;\n  }\n  \n  const get1SensorMockMatrix = (latMatrix, lonMatrix) => {\n    const sensorLat = -23.588826342902333, sensorLon = -46.682215230240686\n    const sensorValue = 100\n    function getExpectedValue (pointLat, pointLon) {\n      const d = getDistance(sensorLat, sensorLon, pointLat, pointLon)\n      const value = sensorValue * Math.exp(-d/50) / 120\n      return value\n    }\n\n    let intensityMatrix = []\n    for(let i=0;i<latMatrix.length;i++){\n      let intensityArray = []\n      for(let j=0;j<lonMatrix.length;j++){\n        const noiseValue = getExpectedValue(latMatrix[i][j], lonMatrix[i][j])\n        intensityArray.push(noiseValue)\n      }\n      intensityMatrix.push(intensityArray)\n    }\n\n    return intensityMatrix\n  }\n\n  const getMockSensors =  (latMatrix, lonMatrix) => {\n    const sensorsLatList = [-23.588826342902333], sensorLonList = [-46.682215230240686]\n    return getSensors(latMatrix, lonMatrix, sensorsLatList, sensorLonList)\n  }\n\n  export {\n      getPerlinMockMatrix,\n      get1SensorMockMatrix,\n      getMockSensors\n  }\n\n","import './App.css';\n\nimport React, { useState } from 'react';\n\nfunction componentToHex(c) {\n  var hex = c.toString(16);\n  return hex.length == 1 ? \"0\" + hex : hex;\n}\n\nfunction rgbToHex(r, g, b) {\n  return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\n\nfunction Square(props) {\n  var color = 'green'\n  const isMeter = props.isMeter ?? false;\n  const intensityPercentage = props.intensityPercentage ?? 0;\n  const lat = props.lat;\n  const lon = props.lon;\n\n  const r = parseInt((187 - 75) * intensityPercentage + 75);\n  const g = parseInt((33 - 181) * intensityPercentage + 181);\n  const b = parseInt((36 - 67) * intensityPercentage + 67);\n\n  const setSelectedSquare = props.setSelectedSquare ?? (() => null);\n\n  return (\n    <div\n      key={`${Math.random()}`}\n      style={{ height: 5, width: 5, backgroundColor: rgbToHex(r, g, b), marginRight: 1, marginBottom: 1 }}\n      onMouseEnter={() => setSelectedSquare({ lat, lon, intensityPercentage })}\n      onMouseLeave={() => setSelectedSquare(null)}\n    />\n  );\n}\n\nexport default Square;\n","import './App.css';\n\nimport React, { useState } from 'react';\n\nimport Square from './Square';\n\nfunction Region(props) {\n  let height = props.height;\n  let width = props.width;\n  const isMain = props.main || false;\n\n  var matrix = Array(height).fill(Array(width).fill(<Square isMain={isMain} />))\n\n  const backgroundColor = isMain ? '#CDCDCD' : 'white';\n  //   const borderColor = isMain ? 'black' : 'white';\n  //   const borderSize = isMain ? 1 : 1;\n\n  const startRow = props.startRow;\n  const startColumn = props.startColumn;\n\n  const intensityMatrix = props.intensityMatrix;\n  const latMatrix = props.latMatrix;\n  const lonMatrix = props.lonMatrix;\n\n  // console.log(intensityMatrix);\n  // console.log(intensityMatrix[0]);\n\n  return (\n    //   <div />\n    <div style={{\n      display: \"flex\",\n      backgroundColor: backgroundColor,\n      // border: borderSize,\n      // borderStyle: \"solid\",\n      // borderColor: borderColor,\n    }}>\n      {\n        matrix.map((row, rowIdx) => {\n          return <div style={{ display: \"\" }} key={`${rowIdx}`}>\n            {\n              row.map((square, colIdx) => {\n                return <Square key={`${rowIdx} ${colIdx}`} setSelectedSquare={props.setSelectedSquare} isMain={isMain} intensityPercentage={intensityMatrix[rowIdx + startRow][colIdx + startColumn]} lat={latMatrix[rowIdx + startRow][colIdx + startColumn]} lon={lonMatrix[rowIdx + startRow][colIdx + startColumn]} />\n                // return <Square isMain={isMain} intensityPercentage={intensityMatrix[rowIdx][colIdx]}/>\n              })\n            }\n          </div>\n        })\n      }\n    </div>\n  );\n}\n\nexport default Region;\n","import './App.css';\n\nimport React, { useState } from 'react';\n\nimport { getDistance, getLatLonValues } from './Api';\nimport Region from './Region';\n\nfunction Area(props) { // assumption: the area is an rectangle\n  const lenOfHeight = props.lenOfHeight\n  const lenOfWidth = props.lenOfWidth\n  const baseLength = props.baseLength\n  const latMatrix = props.latMatrix\n  const lonMatrix = props.lonMatrix\n\n  const intensityMatrix = props.intensityMatrix\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      <div>\n        {\n          [<Region key={Math.random()} setSelectedSquare={props.setSelectedSquare} intensityMatrix={intensityMatrix} latMatrix={latMatrix} lonMatrix={lonMatrix} height={baseLength} width={baseLength} startRow={0} startColumn={0} />, <Region key={Math.random()} setSelectedSquare={props.setSelectedSquare} intensityMatrix={intensityMatrix} latMatrix={latMatrix} lonMatrix={lonMatrix} height={baseLength} width={lenOfWidth} startRow={0} startColumn={0} startRow={0} startColumn={baseLength} />, <Region key={Math.random()} setSelectedSquare={props.setSelectedSquare} intensityMatrix={intensityMatrix} latMatrix={latMatrix} lonMatrix={lonMatrix} height={baseLength} width={baseLength} startRow={0} startColumn={baseLength + lenOfWidth} />]\n        }\n      </div>\n      <div>\n        {\n          [<Region key={Math.random()} setSelectedSquare={props.setSelectedSquare} intensityMatrix={intensityMatrix} latMatrix={latMatrix} lonMatrix={lonMatrix} height={lenOfHeight} width={baseLength} startRow={baseLength} startColumn={0} />, <Region key={Math.random()} setSelectedSquare={props.setSelectedSquare} intensityMatrix={intensityMatrix} latMatrix={latMatrix} lonMatrix={lonMatrix} main={true} height={lenOfHeight} width={lenOfWidth} startRow={baseLength} startColumn={baseLength} />, <Region key={Math.random()} setSelectedSquare={props.setSelectedSquare} intensityMatrix={intensityMatrix} latMatrix={latMatrix} lonMatrix={lonMatrix} height={lenOfHeight} width={baseLength} startRow={baseLength} startColumn={baseLength + lenOfWidth} />]\n        }\n      </div>\n      <div>\n        {\n          [<Region key={Math.random()} setSelectedSquare={props.setSelectedSquare} intensityMatrix={intensityMatrix} latMatrix={latMatrix} lonMatrix={lonMatrix} height={baseLength} width={baseLength} startRow={baseLength + lenOfHeight} startColumn={0} />, <Region key={Math.random()} setSelectedSquare={props.setSelectedSquare} intensityMatrix={intensityMatrix} latMatrix={latMatrix} lonMatrix={lonMatrix} height={baseLength} width={lenOfWidth} startRow={baseLength + lenOfHeight} startColumn={baseLength} />, <Region key={Math.random()} setSelectedSquare={props.setSelectedSquare} intensityMatrix={intensityMatrix} latMatrix={latMatrix} lonMatrix={lonMatrix} height={baseLength} width={baseLength} startRow={baseLength + lenOfHeight} startColumn={baseLength + lenOfWidth} />]\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Area;\n","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\n\nimport { useEffect, useState } from 'react';\nimport { Button, Card, Container, Jumbotron, Nav, Navbar, Tab, Tabs } from 'react-bootstrap';\n\nimport { fetchEstimatedValues, fetchSensorsPosition } from './Api';\nimport { get1SensorMockMatrix, getMockSensors, getPerlinMockMatrix } from './ApiMock';\nimport Area from './Area';\nimport { getDistance, getLatLonValues, getSensors } from './CoordinateUtils';\nimport Square from './Square';\n\nfunction App() {\n  const [selectedSquare, setSelectedSquare] = useState(null);\n\n  const topLeftLat = -23.588826342902333\n  const topLeftLon = -46.682215230240686\n  const topRightLat = -23.589672788243483\n  const topRightLon = -46.68196461184181\n  const bottomRightLat = -23.589956330973465\n  const bottomRightLon = -46.68294486601919\n  const bottomLeftLat = -23.58908832749717\n  const bottomLeftLon = -46.68320100836799\n  const baseLength = 30\n\n  const cathetusTop = getDistance(topLeftLat, topLeftLon, topRightLat, topRightLon)\n  const cathetusRight = getDistance(topRightLat, topRightLon, bottomRightLat, bottomRightLon)\n\n  const lenOfHeight = parseInt(cathetusRight)\n  const lenOfWidth = parseInt(cathetusTop)\n\n  const { latMatrix, lonMatrix } = getLatLonValues(\n    topLeftLat,\n    topLeftLon,\n    bottomRightLat,\n    bottomRightLon,\n    bottomLeftLat,\n    bottomLeftLon,\n    topRightLat,\n    topRightLon,\n    baseLength\n  )\n\n  const minDb = 70;\n  const maxDb = 120;\n\n  const [intensityMatrix, setIntensityMatrix] = useState(get1SensorMockMatrix(latMatrix, lonMatrix))\n  const [displayIntensityMatrix, setDisplayIntensityMatrix] = useState(get1SensorMockMatrix(latMatrix, lonMatrix))\n  const [intensityMatrixSensors, setIntensityMatrixSensors] = useState(getMockSensors(latMatrix, lonMatrix))\n\n  useEffect(() => {\n    fetchEstimatedValues(latMatrix, lonMatrix).then((res) => {\n      console.log('fetchEstimatedValues')\n      console.log(res)\n      setIntensityMatrix(res);\n\n      // const intensityM = res.map(row => {\n      //   return row.map(element => {\n      //     element = element * 120;\n      //     let value = (element - minDb);\n      //     value = value >= 0 ? value : 0;\n      //     value = value <= (maxDb - minDb) ? value : (maxDb - minDb);\n      //     return (maxDb - minDb) / value;\n      //   })\n      // })\n      // setIntensityMatrix(intensityM);\n    }).catch((error) => {\n      console.error(`Error while trying to fetch estimated values: ${error}`);\n    })\n\n    fetchSensorsPosition().then((res) => {\n      console.log('fetchSensorsPosition')\n      console.log(res)\n      const intensityM = getSensors(latMatrix, lonMatrix, res.sensorsLatList, res.sensorLonList);\n      setIntensityMatrixSensors(intensityM);\n    }).catch((error) => {\n      console.error(`Error while trying to fetch sensors: ${error}`);\n    })\n\n  }, []);\n\n  return (\n    <>\n      <Container style={{ marginTop: 24, marginBottom: 24 }}>\n        <h1>HID Project</h1>\n        <p>\n          This graph represents the sound intensity on each square meter on the construction site.\n    <br />\n    The big rectangle in the middle in the construction area.\n    <br />\n    Each small square has 1 by 1 meter.\n    <br />\n    The intensity of the sound on each.\n    </p>\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <Square intensityPercentage={0} /> <span style={{ marginLeft: 2 }}>{`${minDb}db`}</span>\n        </div>\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <Square intensityPercentage={1} /> <span style={{ marginLeft: 2 }}>{`${maxDb}db`}</span>\n        </div>\n        <p>\n        </p>\n        <p>\n        </p>\n        <Card>\n          <Card.Header>\n            <Nav variant=\"tabs\" defaultActiveKey=\"#1\">\n              <Nav.Item>\n                <Nav.Link href=\"#1\" onClick={() => {\n                  // setSensors(false);\n                  setDisplayIntensityMatrix(intensityMatrix)\n                }}>Detection</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link href=\"#2\" onClick={() => {\n                  // setSensors(false);\n                  setDisplayIntensityMatrix(intensityMatrixSensors)\n                }}>Sensors</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link href=\"#3\" onClick={() => {\n                  // setSensors(false);\n                  setDisplayIntensityMatrix(get1SensorMockMatrix(latMatrix, lonMatrix))\n                }}>Detection Example - 1 Sensor</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link href=\"#5\" onClick={() => {\n                  // setSensors(true);\n                  setDisplayIntensityMatrix(getMockSensors(latMatrix, lonMatrix))\n                }}>Sensors Example -  1 Sensor</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link href=\"#6\" onClick={() => {\n                  // setSensors(false);\n                  setDisplayIntensityMatrix(getPerlinMockMatrix(lenOfHeight + (2 * baseLength), lenOfWidth + (2 * baseLength)))\n                }}>Detection Example - Perlin Distribution</Nav.Link>\n              </Nav.Item>\n            </Nav>\n          </Card.Header>\n          <Card.Body>\n            {/* <Card.Text> */}\n            {\n              selectedSquare ? (\n                <div>\n                  <span style={{ marginRight: 4 }}>{`Latitude: ${selectedSquare.lat}`}</span>\n                  <span style={{ marginRight: 4 }}>{`Longitude: ${selectedSquare.lon}`}</span>\n                  <span style={{ marginRight: 4 }}>{`Intensity: ${(selectedSquare.intensityPercentage * (maxDb - minDb) + minDb)}db`}</span>\n                </div>\n              ) : (\n                  <div>\n                    <span>{'Navigate on the graph'}</span>\n                  </div>\n                )\n            }\n            <Area\n              lenOfHeight={lenOfHeight}\n              lenOfWidth={lenOfWidth}\n              baseLength={baseLength}\n              latMatrix={latMatrix}\n              lonMatrix={lonMatrix}\n              intensityMatrix={displayIntensityMatrix}\n              setSelectedSquare={setSelectedSquare}\n            />\n            {/* </Card.Text> */}\n          </Card.Body>\n        </Card>\n      </Container>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}